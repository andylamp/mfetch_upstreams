#!/bin/bash

#
# Nifty little tool that I crafted to keep my repositories up to date
# with their upstream branches as I was really frustrated having to
# type everything over and over again.
#
# if you want to give me beer or flame; you'll easily find a way
# am sure.
#
# Author: Andrew Grammenos (andreas.grammenos@gmail.com)
#
# License: MIT.
#

# pretty functions for log output
function cli_info { echo -e " -- \033[1;32m$1\033[0m" ; }
function cli_warning { echo -e " ** \033[1;33m$1\033[0m" ; }
function cli_error { echo -e " !! \033[1;31m$1\033[0m" ; }

## globals
vmsg="Valid path in:"
smsg="Not valid, cloning from remote to:"

# headless
headless_dir="${HOME}/repos"
# non-headless (desktop mode)
desktop_dir="${HOME}/Desktop"

# github related
repo_host_link="https://github.com"
my_user="andylamp"

# current path
current_dir="$(pwd)"

# counter for processed entries
(( cnt=0 ))

## beautiful and tidy way to expand tilde (~) by C. Duffy.
expand_path() {
  case $1 in
    ~[+-]*)
      local content content_q
      printf -v content_q '%q' "${1:2}"
      eval "content=${1:0:2}${content_q}"
      printf '%s\n' "${content}"
      ;;
    ~*)
      local content content_q
      printf -v content_q '%q' "${1:1}"
      eval "content=~${content_q}"
      printf '%s\n' "${content}"
      ;;
    *)
      printf '%s\n' "$1"
      ;;
  esac
}

## now get the correct path
t_desktop_dir=$(expand_path "${desktop_dir}")
t_headless_dir=$(expand_path "${headless_dir}")

# check if the Desktop directory exists
if [[ ! -d ${t_desktop_dir} ]]; then
    cli_info "Desktop directory appears to be missing - assuming headless mode."
    parent_dir=${t_headless_dir}
else
    cli_info "Desktop directory appears to be present - assuming desktop mode."
    parent_dir=${t_desktop_dir}
fi
cli_info "\tUsing: ${parent_dir}."


## here put your paths relative to the parent directory
## stored above that you want to keep track of; or
## other paths that are not relative to that one...
declare -a paths=(
  "rust;rust-lang"
  "num;rust-num"
  "kafka;apache"
  "storm;apache"
  "ace;ajaxorg"
  "snap;snap-stanford"
  "snap-dev-64;snap-stanford"
  "flink;apache"
  "streaminer;mayconbordin"
  "unlocker;DrDonk"
  "mxnet-the-straight-dope;zackchase"
  "mxnet-slides;zackchase"
  "vimrc;amix"
  "SlideMenuControllerSwift;dekatotoro"
  "linguist;github"
  "ouimeaux;iancmcc"
  "intellij-rust;intellij-rust"
  "uber-juno;JunoLab"
  "TuringLearnDraft.jl;tlienart"
  "AnalyticalEngine.jl;tlienart"
  "Format-Preserving-Encryption;0NG"
  "wmsketch;stanford-futuredata"
  "tsfresh;blue-yonder"
  "fmtl;gingsmith"
  "buddy-malloc;evanw"
  "cyclades;amplab"
  "rbuild;akritid"
  "api-compiler;googleapis"
  "learn-julia-the-hard-way;chrisvoncsefalvay"
  "Gdbinit;gdbinit"
  "acmart;borisveytsman"
  "tlsf;akritid"
  "AzurePublicDataset;Azure"
  "sgx-lkl;lsds"
  "MLJ.jl;alan-turing-institute"
  "d2l-en;d2l-ai"
  "xkcd-font;ipython"
  "OpenPH;rodrgo"
  "PosteriorServer;BigBayes"
  "kubernetes;kubernetes"
  "hypothesis-jsonschema;Zac-HD"
  # my repos
  "fetch_my_key;andylamp"
  "dotfiles;andylamp"
  "bg_run;andylamp"
  "c89_parser;andylamp"
  "BPlusTree;andylamp"
  "linhash;andylamp"
  "hashy_table;andylamp"
  "csv_to_csvs;andylamp"
  "c-various;andylamp"
  "c-primitives;andylamp"
  "moses;andylamp"
  "mfetch_upstreams;andylamp"
)

## check paths
check_path() {
  cli_info "Probing path: ${1}"
  if [[ ! -d ${1} ]]; then
    cli_info "${smsg} ${1}";
    return 0
  else
    cli_info "${vmsg} ${1}";
    return 1
  fi
}

## get the current branch
fetch_and_merge() {
  # get inside the directory
  cd "${parent_dir}/${1}" || return
  # expand the remote link
  plink="${repo_host_link}/${2}/${1}"
  # get the git branch
  branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
  # check if we have an upstream, if not add the one
  # on file
  if [[ ! $(git remote -v) =~ .*upstream.*${plink}.* ]]; then
    cli_warning "No valid remote present for: ${1}, adding: ${plink}"
    git remote remove upstream
    git remote add upstream "${plink}"
  else
    cli_info "Valid upstream present (set at: ${plink})"
  fi
  # pull changes first
  cli_info "Pulling latest changes from repo"
  git pull
  # now fetch the remote
  cli_info "Fetching upstream"
  git fetch upstream
  # now merge
  git merge --no-edit upstream/"${branch}"
  # push back to git
  git push --q
  # now go back to parent dir
  cd "${parent_dir}" || return
  # increment counter
  (( cnt++ ))
}

## get the repo store to that path and
## register the upstream
fetch_and_register() {
  # ensure we are into the correct directory
  cd "${parent_dir}" || return
  my_repo_link="${repo_host_link}/${my_user}/${1}"
  rem_link="${repo_host_link}/${2}/${1}"
  # try to clone

  if ! git clone "${my_repo_link}"; then
    # could not clone
    cli_error "Failed to clone repo from ${my_repo_link}, skipping"
    return
  fi
  cli_info "Cloned repo from ${my_repo_link} to ${parent_dir}/${1}"
  # register remote
  cli_info "Adding remote upstream to repo $1 with value ${rem_link}"
  # go to repo
  cd "${parent_dir}/${1}" || return
  # add the remote
  git remote add upstream "${rem_link}"
  cli_info "Repository ${1} configured successfully!"
  # finally fetch and merge
  fetch_and_merge "${1}" "${2}"
}

## firstly though, just use the git credential helper
## cache to store our credentials for this session
set_git_cache() {
  # NOTE: They are stored **in-memory**
  #       and for the default duration of
  #       15 minutes.
  git config --global credential.helper cache
}

## now fetch updates
probe_paths() {
  # enable git credential cache
  set_git_cache
  # now loop through the array
  cli_info "Probing ${#paths[@]} repositories...\n\n"
  for p in "${paths[@]}"; do
    # shellcheck disable=SC2206
    p=(${p//;/ })
    path="$parent_dir/${p[0]}"
    repo=${p[0]}
    parent_owner=${p[1]}
    cli_info "Trying repository: ${repo} (original owner: ${parent_owner})\n"
    # check the path
    check_path "${path}"
    if [[ ${?} = 1 ]]; then
      fetch_and_merge "${repo}" "${parent_owner}"
    else
      fetch_and_register "${repo}" "${parent_owner}"
    fi
    echo ""
  done
  # after finishing, go back
  # to original directory
  cd "${current_dir}" || return
  cli_info "All done, processed successfully ${cnt} out of ${#paths[@]} repositories\n"
}

## now fire up the paths
probe_paths
